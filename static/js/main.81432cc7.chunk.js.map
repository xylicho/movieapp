{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster","genres","synopsis","className","MoviePoster","alt","map","genre","index","MovieGenre","key","src","prototype","PropTypes","string","isRequired","array","App","state","_renderMovies","movies","movie","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sVAIA,SAASA,EAAT,GAA+C,IAA/BC,EAA8B,EAA9BA,MAAMC,EAAwB,EAAxBA,OAAOC,EAAiB,EAAjBA,OAAOC,EAAU,EAAVA,SAChC,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACC,EAAD,CAAaJ,OAAQA,EAAQK,IAAKN,KAEtC,yBAAKI,UAAU,iBACX,4BAAKJ,GACL,yBAAKI,UAAU,gBACVF,EAAOK,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAACC,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,QAEhE,uBAAGL,UAAU,kBAAkBD,KAM/C,SAASE,EAAT,GAAmC,IAAbJ,EAAY,EAAZA,OAAOK,EAAK,EAALA,IACzB,OACI,yBAAKM,IAAKX,EAAQK,IAAKA,EAAKF,UAAU,iBAI9C,SAASM,EAAT,GAA6B,IAARF,EAAO,EAAPA,MACjB,OACE,0BAAMJ,UAAU,eAAeI,GAIrCT,EAAMc,UAAW,CACbb,MAAOc,IAAUC,OAAOC,WACxBf,OAAQa,IAAUC,OAAOC,WACzBd,OAAQY,IAAUG,MAAMD,WACxBb,SAAUW,IAAUC,OAAOC,WAC3BV,IAAKQ,IAAUC,OAAOC,YAGXjB,QCsCAmB,E,2MAnEXC,MAAQ,G,EA4BRC,cAAgB,WAaZ,OAZe,EAAKD,MAAME,OAAOd,KAAI,SAAAe,GAEjC,OACI,kBAAC,EAAD,CACItB,MAAOsB,EAAMC,cACbtB,OAAQqB,EAAME,mBACdb,IAAKW,EAAMG,GACXvB,OAAQoB,EAAMpB,OACdC,SAAUmB,EAAMnB,e,EAOhCuB,W,sBAAa,4BAAAC,EAAA,sEACY,EAAKC,WADjB,OACHP,EADG,OAET,EAAKQ,SAAS,CACVR,WAHK,2C,EAMbO,SAAW,WACP,OAAOE,MAAM,yDACRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKb,UACvBc,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFA5B9BG,KAAKb,e,+BA8BC,IACCL,EAAUkB,KAAKpB,MAAfE,OACP,OACI,yBAAKjB,UAAWiB,EAAS,MAAQ,eAC5BkB,KAAKpB,MAAME,OACNkB,KAAKnB,gBACL,e,GAtEJoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.81432cc7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'; // ES6\nimport './Movie.css';\n\nfunction Movie({title,poster,genres,synopsis}){ \n    return(\n        <div className=\"movie\">\n            <div className=\"movie_Columns\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"movie_Columns\">\n                <h1>{title}</h1>\n                <div className=\"movie_Genres\">\n                    {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\n                </div>\n                <p className=\"movie_synopsis\">{synopsis}</p>\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({poster,alt}){\n    return(\n        <img src={poster} alt={alt} className=\"movie_poster\"/>\n    )\n}\n\nfunction MovieGenre({genre}){\n    return(\n      <span className=\"movie-genre\">{genre}</span>\n    )\n}\n\nMovie.prototype ={\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}//어떤 종류의 정보를 받는지, 꼭 받아야되는거 표시.\n\nexport default Movie;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n   \n    /*update componenetWillReceiveProps():컴포넌트가 새 props 받았다 -> shouldComponentUpdate():업데이트된거 맞니? -> componentwillUpdate():업뎃한다?로딩바만들수있구 -> render() => componentDidMount():작업됐으니 로딩바숨기구\n    componentWillMount(){\n        console.log('willmount:사이클시작 - didrender:컴포넌트가 존재 - didmount:컴포넌트가 자리잡음')\n    }\n    render(){ return()}//컴포넌트는 무조건 렌더-> 리턴 해줘야 보여준대 jsx는 리액트에서 사용하는 html*/\n\n    state = {\n        /*movies: [\n            {\n                title: \"m\",\n                poster:\n                    \"https://upload.wikimedia.org/wikipedia/ko/d/d4/%ED%8E%AD%EC%88%98.jpg\"\n            },\n            {\n                title: \"f\",\n                poster:\n                    \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Yusanseul.jpg/440px-Yusanseul.jpg\"\n            },\n            {\n                title: \"o\",\n                poster:\n                    \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/Yoo_Jae_Suk_going_to_work_at_Happy_Together_on_August_19%2C_2017_%282%29.jpg/440px-Yoo_Jae_Suk_going_to_work_at_Happy_Together_on_August_19%2C_2017_%282%29.jpg\"\n            },\n            {\n                title: \"s1\",\n                poster:\n                    \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Siberian_Tiger_by_Malene_Th.jpg/600px-Siberian_Tiger_by_Malene_Th.jpg\"\n            }\n        ] state에 무비가 없으면.. 이라는 조건을 수행하기 위해 주석 처리*/\n    };\n\n    componentDidMount() {\n        this._getMovies();\n    }\n    _renderMovies = () => {\n        const movies = this.state.movies.map(movie => {\n            //moviesfmf movie에 맵핑\n            return (\n                <Movie\n                    title={movie.title_english}\n                    poster={movie.medium_cover_image}\n                    key={movie.id}\n                    genres={movie.genres}\n                    synopsis={movie.synopsis}\n                />\n            );\n        });\n        return movies;\n    };\n\n    _getMovies = async () => {\n        const movies = await this._callApi(); //callApi의 작업이 끝나기를 기다린다.(call api의 리턴값을 movies에 셋팅하기 위해.) 끝나야 setState 실행 됨.\n        this.setState({\n            movies\n        });\n    };\n    _callApi = () => {\n        return fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\") //이 끝나면\n            .then(response => response.json()) //response(이름은 상관없음).를 json으로 바꾸구\n            .then(json => json.data.movies) //이거해\n            .catch(err => console.log(err)); //에러잇음 얘해\n    };\n    render() {\n        const {movies} = this.state;\n        return (\n            <div className={movies ? \"App\" : \"App-loading\"}>\n                {this.state.movies\n                    ? this._renderMovies()\n                    : \"loading\" /*_붙인 이유는 리액트 자체의 함수가 아닌 나의 함수인걸 표현하기 위해*/}\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//react = 라이브러리, reactDom = 라이브러리 출력\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}